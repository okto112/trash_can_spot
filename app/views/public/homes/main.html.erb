<div class="col">
  <div id="pc_search_form">
    <div class="flash-message-container">
      <%= render 'layouts/flash_message' %>
    </div>
    <div class="row justify-content-center mb-2">
      <div class="row p-1 align-items-center border border-success rounded">
          <div class="font-weight-bold">種類検索：</div>
        <div id="kinds-box" class="d-flex align-middle ml-1 overflow-auto">
          <div class="bg-white m-1">
            <%= link_to "すべて", public_main_path(kind_id: 0), data: {"turbolinks" => false}, id: 0, class: "kind-btn" %>
          </div>
          <% @kinds.each do |kind| %>
          <div class="bg-white m-1">
            <%= link_to  kind.name, public_main_path(kind_id: kind.id), data: {"turbolinks" => false}, id: kind.id, class: "kind-btn" %>
          </div>
          <% end %>
        </div>
      </div>
      <div class="d-flex border border-success rounded p-2 ml-4">
        <%= form_with url: public_main_path, method: :get do |f| %>
          <%= f.text_field :key_word,value: @key_word, placeholder: "キーワード検索", class: "mt-1" %>
          <%= button_tag type: "submit", class: "btn btn-info btn-sm ml-1 mb-1" do %>
           <i class="fa-solid fa-magnifying-glass"> 検索</i>
          <% end %>
        <% end %>
      </div>
      <form class="d-flex align-items-center border border-success rounded p-2 ml-2">
        <input id="address" type="textbox" placeholder="地図検索">
        <button type="button" onclick="codeAddress()" class="btn btn-success btn-sm ml-1"><i class="fa-solid fa-magnifying-glass"> 検索</i></button>
      </form>
    </div>
  </div>
  <%= render 'sp_search_form' %>

  <div class="row justify-content-center">
    <div id="spot-info" class="col-2 overflow-auto p-2 bg-white border border-success rounded">
      <h3 class="mb-2"><i id="spot-icon" class="fa-solid fa-location-dot"></i> スポット情報</h3>
        <h4>スポット名：</h4>
        <div class="ml-4 mb-2">
          <p id="spot-name"></p>
        </div>

        <h4>スポット説明：</h4>
        <div class="ml-4 mb-2">
          <p id="spot-introduction"></p>
        </div>

        <h4>ゴミ箱の種類：</h4>
        <div id="spot-kinds" class="text-center mb-2"></div>

        <div id="date" class="mb-2 text-right"></div>

        <div id="favorite_form" class="mb-3 d-flex"></div>

        <div id="edit-button" class="text-center mb-3"></div>

        <p id="font-bold" class="text-center text-success border-top border-success p-2">スポットへのコメント</p>
        <div id="comments-box" class="overflow-auto text-wrap border border-success p-1" ></div>
        <div id="comment-button" class="text-center"></div>
    </div>

    <div class="col-xl-9">
      <div id="map" class="mt-2"></div>
    </div>
  </div>

  <%= render 'sp_spot_info' %>
</div>

<script>
 (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
    key: "<%= ENV['API_KEY'] %>"
  });

  //マップの初期設定
  let map;
  let marker
  let markerIds = [];
  let infowindow = "";
  let infoWindows = [];
  let spotKindsHtml = "";
  let changeStyle = false;
  const spotInfoWindow = document.getElementById("spot-info")
  const spSpotInfoWindow = document.getElementById("sp-spot-info")

  async function initMap() {
    const { Map } = await google.maps.importLibrary("maps");

    map = new google.maps.Map(document.getElementById('map'), {
      center:  {lat: 34.70246347104699, lng: 135.4955532773327},
      zoom: 15,
      mapTypeControl: false
    });

    initSpots()
  }

  //検索後のマップ作成
  let geocoder
  function codeAddress(){
    geocoder = new google.maps.Geocoder();
    let inputAddress = document.getElementById('address').value;
    geocoder.geocode( { 'address': inputAddress}, function(results, status) {
      if (status == 'OK') {
        map = new google.maps.Map(document.getElementById('map'), {
          center:  {lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng()},
          zoom: 15,
          mapTypeControl: false
        });

        initSpots()
      } else {
        alert('該当する結果がありませんでした：' + status);
      }
    });
  }

  //スポットの初期化
  function initSpots(){
    <% @spots.each do |spot|%>
      ( function() {
        let markerLatLng = { lat: <%= spot.latitude %>, lng: <%= spot.longitude %> };
        let marker = new google.maps.Marker({
          position: markerLatLng,
          id: '<%= spot.id %>',
          map: map
        });

        kindsInfo();

        marker.addListener('click', function() {
          closeInfoWindows();
          kindsInfo();
          let winWidth = $(window).width();

          if (!changeStyle && winWidth<=1200) {
            spSpotInfoWindow.style.display = 'block';
          }else{
            spotInfoWindow.style.display = 'block';
          }

          $("#spot-name, #sp-spot-name").text("<%= spot.name %>");
          $("#spot-introduction, #sp-spot-introduction").text("<%= spot.introduction %>");
          $("#spot-kinds, #sp-spot-kinds").html(spotKindsHtml);
          $("#date, #sp-date").text("登録日：<%= spot.created_at.strftime('%Y/%m/%d') %>");
          $("#favorite_form").html('<p>お気に入り登録：</p><div id="favorite_btn_<%= spot.id %>" class="m-auto"></div>');
          $("#sp-favorite_form").html('<p>お気に入り登録：</p><div id="sp-favorite_btn_<%= spot.id %>" class="m-auto"></div>');
          $('#favorite_btn_<%= spot.id %>, #sp-favorite_btn_<%= spot.id %>').html("<%= j(render 'public/favorites/favorite_btn', spot: spot) %>");
          <% if spot.user_id == current_user.id %>
            $("#edit-button, #sp-edit-button").html('<%= link_to edit_public_spot_path(spot.id), data: {"turbolinks" => false}, class:"btn btn-primary" do %><i class="fa-solid fa-pen-to-square"> 編集する</i><% end %>');
          <% else %>
            $("#edit-button, #sp-edit-button").html('');
          <% end %>
          <% if @comments.where(spot_id: spot.id).any? %>
            $("#comments-box, #sp-comments-box").html('');
            <% @comments.where(spot_id: spot.id).each do |comment| %>
              $("#comments-box, #sp-comments-box").append('<p class="mt-1"><%= User.find(comment.user_id).name %></p><p class="p-1 text-break"><%= comment.comment %></p><p class="border-bottom text-right">登録日：<%= comment.created_at.strftime('%Y/%m/%d') %></p>');
            <% end %>
          <% else %>
            $("#comments-box, #sp-comments-box").html('<p>コメントはありません</p>');
          <% end %>
          $("#comment-button, #sp-comment-button").html('<%= link_to new_public_comment_path(spot_id: spot.id), data: {"turbolinks" => false}, class:"btn btn-success mt-2" do %><i class="fa-solid fa-comment-dots"> コメントする</i><% end %>');

          infowindow.open(map, marker);
          markerIds.push(<%= spot.id %>);
          infoWindows.push(infowindow);
          spotKindsHtml = "";
        });


        // マップ内のウィンドウを閉じる
        function closeInfoWindows() {
          for (let i = 0; i < infoWindows.length; i++) {
            infoWindows[i].close();
          }
        }

        // kindの呼出しとマップ内のウィンドウの内容作成
        function kindsInfo() {
          spotKindsHtml = "";
          <%= render 'layouts/spot_kinds_html', spot: spot %>

          infowindow = new google.maps.InfoWindow({
            position: markerLatLng,
            content: "スポット情報</br>" +
              "スポット名：<%= spot.name %></br>" +
              "ゴミの種類：</br>" +
              spotKindsHtml +
              "<div class='text-right'>登録日：<%= spot.created_at.strftime('%Y/%m/%d') %></div>"
          });
        }
     })();
    <% end %>
  }

  initMap()

  //種類検索タグのスタイル設定
  window.onload = function() {
    $("#0, #sp0").addClass("btn btn-outline-secondary");
    <% @kinds.each do |kind| %>
      $("#<%= kind.id %>, #sp<%= kind.id %>").addClass("btn btn-outline-secondary");
    <% end %>
    $("#<%= @kind_id %>, #sp<%= @kind_id %>").addClass("btn btn-warning");
  };

  //種類検索の横スクロール
  const kindsBox = document.getElementById('kinds-box');
  kindsBox.addEventListener('wheel', function(event) {
    event.preventDefault(); // デフォルトのスクロール動作をキャンセル
    const delta = Math.max(-1, Math.min(1, (event.deltaY || -event.wheelDelta || event.detail)));
    kindsBox.scrollLeft += (delta * 50); // 横スクロールの速度を調整するための値を設定
  });


  //スポット情報ウインドウのレスポンシブ切替表示
  window.addEventListener('resize', function() {
    if (spotInfoWindow.style.display === 'block' || spSpotInfoWindow.style.display === 'block') {
      if (window.innerWidth <= 1200) {
        spotInfoWindow.style.display = 'none';
        spSpotInfoWindow.style.display = 'block';
      } else {
        spotInfoWindow.style.display = 'block';
        spSpotInfoWindow.style.display = 'none';
      }
    }
  });
</script>
